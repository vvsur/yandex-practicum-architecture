version: '3'
name: sharding-repl-cache

services:

  configSrv:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: configSrv
    restart: always
    ports:
      - "27017:27017"
    networks:
      app-network:
        ipv4_address: 173.17.0.10
    volumes:
      - config-data:/data/db
    command:
      [
        "--configsvr", # запуск в режиме конфигурации
        "--replSet",
        "config_server",
        "--bind_ip_all",
        "--port",
        "27017"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #1-й шард (и 1-я реплика он же)
  shard1:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard1
    restart: always
    ports:
      - "27122:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.9
    volumes:
      - shard1-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard1",
        "--bind_ip_all",
        "--port",
        "27018"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 1-й шард 2-я реплика
  shard1-r2:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard1-r2
    restart: always
    ports:
      - "27123:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.5
    volumes:
      - shard1-r2-data:/data/db
    command: [ "--shardsvr", "--replSet", "shard1", "--bind_ip_all", "--port", "27018" ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 1-й шард 3-я реплика
  shard1-r3:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard1-r3
    restart: always
    ports:
      - "27124:27018"
    networks:
      app-network:
        ipv4_address: 173.17.0.4
    volumes:
      - shard1-r3-data:/data/db
    command: [ "--shardsvr", "--replSet", "shard1", "--bind_ip_all", "--port", "27018" ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #2-й шард 
  shard2:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard2
    restart: always
    ports:
      - "27125:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.8
    volumes:
      - shard2-data:/data/db
    command:
      [
        "--shardsvr", # запуск в режиме шардинга
        "--replSet",
        "shard2", # название шарда
        "--bind_ip_all",
        "--port",
        "27019"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 2-й шард 2-я реплика
  shard2-r2:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard2-r2
    restart: always
    ports:
      - "27126:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.3
    volumes:
      - shard2-r2-data:/data/db
    command: [ "--shardsvr", "--replSet", "shard2", "--bind_ip_all", "--port", "27019" ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  # 2-й шард 3-я реплика
  shard2-r3:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: shard2-r3
    restart: always
    ports:
      - "27127:27019"
    networks:
      app-network:
        ipv4_address: 173.17.0.2
    volumes:
      - shard2-r3-data:/data/db
    command: [ "--shardsvr", "--replSet", "shard2", "--bind_ip_all", "--port", "27019" ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  #роутер
  mongos_router:
    image: dh-mirror.gitverse.ru/mongo:latest
    container_name: mongos_router
    restart: always
    ports:
      - "27020:27020"
    networks:
      app-network:
        ipv4_address: 173.17.0.7
    command:
      [
        "mongos", # обычная mongo в режиме роутера
        "--configdb",
        "config_server/configSrv:27017", # передача данных сервера конфигурации
        "--bind_ip_all",
        "--port",
        "27020"
      ]
    healthcheck:
      test: [ "CMD", "mongo", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      start_period: 10s

  redis:
    image: "redis:latest"
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: [ "redis-server", "/usr/local/etc/redis/redis.conf" ]
    networks:
      app-network:
        ipv4_address: 173.17.0.20

  pymongo_api:
    container_name: pymongo_api
    build:
      context: api_app
      dockerfile: Dockerfile
    image: kazhem/pymongo_api:1.0.0
    depends_on:
      - mongos_router
    ports:
      - 8080:8080
    networks:
      app-network:
        ipv4_address: 173.17.0.6
    environment:
      MONGODB_URL: "mongodb://mongos_router:27020"
      MONGODB_DATABASE_NAME: "somedb"
      REDIS_URL: "redis://redis:6379"

networks:
  app-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 173.17.0.0/16

volumes:
  config-data:
  shard1-data:
  shard1-r2-data:
  shard1-r3-data:
  shard2-data:
  shard2-r2-data:
  shard2-r3-data:
  redis_data: {}
